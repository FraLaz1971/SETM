#serena bash scripts general utilities
#debug "'\${FUNCNAME[0]}' = ${FUNCNAME[0]}"
#debug "'\${FUNCNAME[1]}' = ${FUNCNAME[1]}"
#debug "BASH_SOURCE = $BASH_SOURCE"
if [[ $BASH_SOURCE =~ '/' ]] 
then 
  dirpath="${BASH_SOURCE%/*}"
    #debug "'\$0' = $0"
else 
  dirpath='.'
fi
#debug "dirpath = $dirpath"
. $dirpath/errvals

DEBUGLEV="INFO"
ds="|" # debug separator char
prog="bash"
hn=$(hostname)
BCCMD="bc"

debug(){
  if [[ $# -ne 1 ]]
  then
    debug "usage: debug <string>"
    return $E_BADARGS;
  else
    if test "${FUNCNAME[1]}"; then prog=${FUNCNAME[1]}; fi
    cat <<< "$(date +'%FT%T.%N')$ds$hn$ds$prog$ds$DEBUGLEV$ds$1" 1>&2
    if [ x"$DEBUGLEV" == x"ERR" ]; 
    then 
      setdebuglevel "INFO"
      return 1;
    fi
      setdebuglevel "INFO"
      return $EX_OK
  fi
}

setdebuglevel(){
  if [[ $# -ne 1 ]]
  then
    debug "usage: setdebuglevel <level> (INFO|WARN|ERR)"
    return $E_BADARGS;
  else
    case "$1" in
      "INFO" | "WARN" | "ERR" ) 
      DEBUGLEV="$1"
    ;;
    *) 
      setdebuglevel "ERR"
      debug "illegal debug level entered"
      return $E_ARGSLIMITS
    ;;
    esac
    return $EX_OK
  fi
}


fillrandom(){ # fills the sectors histogram 32 elements vector with random values in the range [0-99] 
  for ((a=0; a<32; a++))
  do
    hv[$a]=$(($RANDOM*100/32767))
  done
}
# gives 0 if the input string is an integer, 1 if not
is_int(){
  if [[ "$#" -ne 1 ]] 
  then
      echo "usage: is_int <string>"
      return $E_BADARGS
  else
      # returns 0 if input parameter is an integer value (decimal) 
      if [[ "$1" =~ ^[0-9][0-9]*$ ]]
      then
	return 0
      else
	return 1
      fi
  fi
}

bitvectobyte(){ #for a given 8 bit vector return a decimal value in [0-255]
  if [ "$#" -ne 8 ]
  then
    echo "usage ${FUNCNAME[0]} b0 b1 b2 b3 b4 b5 b6 b7 b8 (bits [0/1])"
    return $E_BADARGS
  else
  for val in "$@" 
  do 
    if [[ "$val" == "1" ]] || [[ "$val" == "0" ]]
    then
      :
      #debug "ok you entered one correct bit value $val"
    else
      setdebuglevel "ERR"
      debug "you must enter only bits values [0/1]"
      return $EX_DATAERR
    fi
  done
  str="$@"
  debug "calculating the value of the byte composed by $str"
  cmpstr=${str// /}
  #debug "cmpstr is $cmpstr"
  bintodec $cmpstr
  fi
}

bitvectoword(){ #for a given 8 bit vector return a decimal value in [0-255]
  if [ "$#" -ne 16 ]
  then
    echo "usage ${FUNCNAME[0]} b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 b13 b14 b15 (bits [0/1])"
    return $E_BADARGS
  else
  for val in "$@" 
  do 
    if [[ "$val" == "1" ]] || [[ "$val" == "0" ]]
    then
      :
      #debug "ok you entered one correct bit value $val"
    else
      setdebuglevel "ERR"
      debug "you must enter only bits values [0/1]"
      return $EX_DATAERR
    fi
  done
  str="$@"
  debug "calculating the value of the byte composed by $str"
  cmpstr=${str// /}
  #debug "cmpstr is $cmpstr"
  bintodec $cmpstr
  fi
}

wordtobin(){ #taking a value in the byte range [0-255] it puts on the stdout its binary value
  if [ "$#" -ne 1 ]
  then
    echo "usage ${FUNCNAME[0]} <int.number> (decimal [0-65535])"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[+-]*[[:digit:]]*$ ]] 
  then
    setdebuglevel "ERR"
    debug "you must enter a decimal number!"
    return $EX_DATAERR
  elif [[ "$1" -lt 0 ]] || [[ "$1" -gt 65535 ]]
  then
    setdebuglevel "ERR"
    debug "the value $1 you entered is out of the allowed range"
    return $E_ARGSLIMITS
  else
    debug "returning the binary value of $(($1))"
    MSB=$(($1)) && $(bintodec 1111111100000000) #65280
    LSB=$(($1)) && $(bintodec 11111111) #255
    #xval1=$(dectohex "$(($1))")
    debug "xval1 = $xval1"
    debug "xval2 = $xval2"
    bytetobin $val1;  bytetobin $val2;
    return $EX_OK
  fi
}

bytetobin(){ #taking a value in the byte range [0-255] it puts on the stdout its binary value
  if [ "$#" -ne 1 ]
  then
    echo "usage ${FUNCNAME[0]} <int.number> (decimal [0-255])"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[+-]*[[:digit:]]*$ ]] 
  then
    setdebuglevel "ERR"
    debug "you must enter a decimal number!"
    return $EX_DATAERR
  elif [[ "$1" -lt 0 ]] || [[ "$1" -gt 255 ]]
  then
    setdebuglevel "ERR"
    debug "the value $1 you entered is out of the allowed range"
    return $E_ARGSLIMITS
  else
    #debug "returning the binary value of $(($1))"
    xval=$(dectohex "$(($1))")
    echo -en "\x$xval" | xxd -u | xxd -r 
    return $EX_OK
  fi
}

wordtobin(){ #taking a value in the byte range [0-255] it puts on the stdout its binary value
  if [ "$#" -ne 1 ]
  then
    echo "usage ${FUNCNAME[0]} <int.number> (decimal [0-65535])"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[+-]*[[:digit:]]*$ ]] 
  then
    setdebuglevel "ERR"
    debug "you must enter a decimal number!"
    return $EX_DATAERR
  elif [[ "$1" -lt 0 ]] || [[ "$1" -gt 65535 ]]
  then
    setdebuglevel "ERR"
    debug "the value $1 you entered is out of the allowed range"
    return $E_ARGSLIMITS
  else
    MSB=0; LSB=0
    #    debug "returning the binary value of $(($1))"
    MSB=$((($1 & $(bintodec 1111111100000000) ) >> 8)) #65280
    LSB=$(($1 & $(bintodec 11111111) )) #255
    #    debug "MSB = $MSB"
    #    debug "LSB = $LSB"
    bytetobin $MSB;  bytetobin $LSB;
    return $EX_OK
  fi
}

compose_word(){
  if [ "$#" -ne 2 ]
  then
    echo "usage: ${FUNCNAME[0]} <MSB> <LSB> (decimals [0-255])"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[+-]*[[:digit:]]*$ ]] || [[ ! "$2" =~ ^[+-]*[[:digit:]]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must enter decimal numbers!"
    return $EX_DATAERR
  elif [[ "$1" -lt 0 ]] || [[ "$1" -gt 255 ]] || [[ "$2" -lt 0 ]] || [[ "$2" -gt 255 ]]
  then
    setdebuglevel "ERR"
    debug "one of the values $1 $2 you entered is out of the allowed range"
    return $E_ARGSLIMITS
  else
    echo $(( ( $1 << 8) + $2 ))
  fi
}

binarytobitvect(){
  if [ "$#" -ne 1 ]
  then
    echo "usage ${FUNCNAME[0]} <binary number> [0|1]*"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-1][0-1]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a binary number [0/1]*"
    return $EX_DATAERR
  else
    binval=$1
    debug "returning the bit vector of $1"
    for((i=0; i<((${#binval} - 1)); i++))
    do 
      echo -n "${binval:$i:1} " 
    done
    echo -n "${binval:$i:1}" 
    return $EX_OK
  fi
}


remove_tempfile(){
  echo "remove file $1 ? (y/n) [enter]"
  read av
  case "$av" in
  "y" )
    if test -f $1; then rm $1; fi
    return "$?"
  ;;
  "n" )
    debug "$1 has NOT been removed"
    return "$?"
  ;;
  * )
    echo "please type y or n"
    remove_tempfile $1
  esac
}

getRandom(){
  if [[ $# != 1 ]]
  then
    debug "getRandom: gives a random number in the field [0-max)"
    debug "usage: getRandom <max value>"
    return $E_BADARGS;
  else
    is_int $1 || { setdebuglevel "ERR"; debug "input args $1 MUST be integer value"; }
    echo $(($RANDOM*$1/32767))
  fi
}

isalpha() { # return  1 if input is an alphabetic character 0 otherwise
  if [[ "$#" -ne 1 ]]
  then
    echo "usage: $0 <char>"
    return $E_BADARGS
  elif [ ${#$1} -gt 1 ]
  then
    echo "only 1 char input allowed"
    return $EX_DATAERR
  else
    if [[ "$1" =~ [[:alpha:]] ]] 
    then
        return 1
    else
	return 0
    fi
  fi
}
# print the decimal value ascii code of a printable character 
chartoasciid(){
   ARG=1
   if [ "$#" != "$ARG" ]
   then
    echo "usage: ${FUNCNAME[0]} <char>"
     return $E_BADARGS
  elif [[ ! "$1" =~ ^.$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input one printable ascii character"
    return $EX_DATAERR
   else
     #debug "executing a=\$(echo -n \"$1\" | hexdump -e '1/1 \"%02X\n\"'); hextodec $a"
     a=$(echo -n "$1" | hexdump -e '1/1 "%02X\n"'); hextodec $a
   fi
}

chartoasciix(){
   ARG=1
   if [ "$#" != "$ARG" ]
   then
    echo "usage: ${FUNCNAME[0]} <char>"
     return $E_BADARGS
    elif [[ ! "$1" =~ ^.$ ]]
    then
      setdebuglevel "ERR"
      debug "you must input one printable ascii character"
      return $EX_DATAERR
    else
     #debug "executing a=\$(echo -n \"$1\" | hexdump -e '1/1 \"%02X\n\"'); hextodec $a"
     a=$(echo -n "$1" | hexdump -e '1/1 "%02X\n"'); echo $a
    fi
}

chartoasciio(){
   ARG=1
   if [ "$#" != "$ARG" ]
   then
    echo "usage: ${FUNCNAME[0]} <char>"
     return $E_BADARGS
  elif [[ ! "$1" =~ ^.$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input one printable ascii character"
    return $EX_DATAERR
   else
     #debug "executing a=\$(echo -n \"$1\" | hexdump -e '1/1 \"%02X\n\"'); hextodec $a"
     a=$(echo -n "$1" | hexdump -e '1/1 "%02X\n"'); hextooct $a
   fi
}

chartoascii(){
  chartoasciid "$@"
}

dectobin(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: dectobin <decval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9][0-9]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a positive decimal number [0-9]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=2;ibase=10; $1"
    return 0
  fi
}

bintodec(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: bintodec <binval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-1][0-1]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a binary number [0/1]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=10;ibase=2; $1"
  fi
}

bintooct(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <binval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-1][0-1]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a binary number [0/1]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=8;ibase=2; $1"
  fi
}


bintohex(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: bintohex <binval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-1][0-1]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a binary number [0/1]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=16;ibase=2; $1"
  fi
}

hextobin(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <hexval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9A-F][0-9A-F]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an hex number [0-9A-F]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=2;ibase=16; $1"
  fi
}

octobin(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <octval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-7][0-7]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an oct number [0-7]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=2;ibase=8; $1"
  fi
}

hextodec(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: hextodec <hexval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9A-F][0-9A-F]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an hex number [0-9A-F]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=10;ibase=16; $1"
  fi
}

hextooct(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: hextodec <hexval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9A-F][0-9A-F]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an hex number [0-9A-F]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=8;ibase=16; $1"
  fi
}

octodec(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <octval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-7][0-7]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an oct number [0-7]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=10;ibase=8; $1"
  fi
}

octohex(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <octval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-7][0-7]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an oct number [0-7]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=16;ibase=8; $1"
  fi
}

dectohex(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: dectohex <decval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9][0-9]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a positive decimal number [0-9]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=16;ibase=10; $1"
  fi
}

dectooct(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <decval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9][0-9]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a positive decimal number [0-9]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=8;ibase=10; $1"
  fi
}

randombits(){
  ARG=1

  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <decval>"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[0-9][0-9]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input a positive decimal number [0-9]*"
    debug "usage: ${FUNCNAME[0]} <decval>"
    return $EX_DATAERR
  else
    for c in $(eval echo {0..$(($1 - 2))}); do printf "%d " $(getRandom 2); done; printf "%d" $(getRandom 2)
  fi
}
#create a binary file full of random data with size 1024 bytes
#for ((k=0; k<1024; k++)); do bytetobin $(getRandom 255) >> randombytes; done;
# map an array of printable char with respective dec hex and oct ascii code values
#string=(c a r e  c a);(echo "char:dec:hex:oct";for c in ${string[*]}; do echo $c:$(chartoasciid $c):$(chartoasciix $c):$(chartoasciio $c); done) | awk 'BEGIN{FS=":";OFS='\t'}{for(a=1; a<=NF; a++) printf("%s\t",$a); printf("\n")}'
