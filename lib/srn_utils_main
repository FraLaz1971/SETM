#serena scripts general utilities
. srn_utils
debug "'\${FUNCNAME[0]}' = ${FUNCNAME[0]}"
debug "'\${FUNCNAME[1]}' = ${FUNCNAME[1]}"
debug "BASH_SOURCE = $BASH_SOURCE"
if [[ $BASH_SOURCE =~ '/' ]] 
then 
  dirpath="${BASH_SOURCE%/*}"
  debug "'\$0' = $0"
else 
  dirpath='.'
fi
debug "dirpath = $dirpath"
. $dirpath/errvals

DEBUGLEV="INFO"
ds="|" # debug separator char
prog="fe library"
hn=$(hostname)
BCCMD="bc"

debug(){
  if [[ $# -ne 1 ]]
  then
    debug "usage: debug <string>"
    return $E_BADARGS;
  else
    prog=${FUNCNAME[1]}
    cat <<< "$(date +'%FT%T.%N')$ds$hn$ds$prog$ds$DEBUGLEV$ds$1" 1>&2
    if [ x"$DEBUGLEV" == x"ERR" ]; 
    then 
      setdebuglevel "INFO"
      return 1;
    fi
      setdebuglevel "INFO"
      return $EX_OK
  fi
}

setdebuglevel(){
  if [[ $# -ne 1 ]]
  then
    debug "usage: setdebuglevel <level> (INFO|WARN|ERR)"
    return $E_BADARGS;
  else
    case "$1" in
      "INFO" | "WARN" | "ERR" ) 
      DEBUGLEV="$1"
    ;;
    *) 
      setdebuglevel "ERR"
      debug "illegal debug level entered"
      return $E_ARGSLIMITS
    ;;
    esac
    return $EX_OK
  fi
}


fillrandom(){
  for ((a=0; a<32; a++))
  do
    hv[$a]=$(($RANDOM*100/32767))
  done
}
# gives 0 if the input string is an integer, 1 if not
is_int(){
  if [[ "$#" -ne 1 ]] 
  then
      echo "usage: is_int <string>"
      return $E_BADARGS
  else
      # returns 0 if input parameter is an integer value (decimal) 
      if [[ "$1" =~ ^[0-9][0-9]*$ ]]
      then
	return 0
      else
	return 1
      fi
  fi
}

bitvectobyte(){
  if [ "$#" -ne 8 ]
  then
    echo "usage ${FUNCNAME[0]} b0 b1 b2 b3 b4 b5 b6 b7 b8 bits [0/1]"
    return $E_BADARGS
  else
  for val in "$@" 
  do 
    if [[ "$val" == "1" ]] || [[ "$val" == "0" ]]
    then
      debug "ok you entered one correct bit value $val"
    else
      setdebuglevel "ERR"
      debug "you must enter only bits values [0/1]"
      return $EX_DATAERR
    fi
  done
  str="$@"
  debug "calculating the value of the byte composed by $str"
  cmpstr=${str// /}
  debug "cmpstr is $cmpstr"
  bintodec $cmpstr
  fi
}

bytetobin(){ #taking a value in the byte range [0-255] it puts on the stdout its binary value
  if [ "$#" -ne 1 ]
  then
    echo "usage ${FUNCNAME[0]} <int.number> decimal [0-255]"
    return $E_BADARGS
  elif [[ ! "$1" =~ ^[+-]*[[:digit:]]*$ ]] 
  then
    setdebuglevel "ERR"
    debug "you must enter a decimal number!"
    return $EX_DATAERR
  elif [[ "$1" -lt 0 ]] || [[ "$1" -gt 255 ]]
  then
    setdebuglevel "ERR"
    debug "the value $1 you entered is out of the allowed range"
    return $E_ARGSLIMITS
  else
    #debug "returning the binary value of $(($1))"
    xval=$(dectohex "$1")
    echo -en "\x$xval" | xxd -u | xxd -r 
    return $EX_OK
  fi
}

remove_tempfile(){
  echo "remove file $1 ? (y/n) [enter]"
  read av
  case "$av" in
  "y" )
    if test -f $1; then rm $1; fi
    return "$?"
  ;;
  "n" )
    debug "$1 has NOT been removed"
    return "$?"
  ;;
  * )
    echo "please type y or n"
    remove_tempfile $1
  esac
}

getRandom(){
  if [[ $# != 1 ]]
  then
    debug "getRandom: gives a random number in the field [0-max)"
    debug "usage: getRandom <max value>"
    exit $E_BADARGS;
  else
    is_int $1 || { setdebuglevel "ERR"; debug "input args $1 MUST be integer value"; }
    echo $(($RANDOM*$1/32767))
  fi
}

isalpha() { # return  1 if input is an alphabetic character 0 otherwise
  if [[ "$#" -ne 1 ]]
  then
    echo "usage: $0 <char>"
    return $E_BADARGS
  elif [ ${#$1} -gt 1 ]
  then
    echo "only 1 char input allowed"
    return $EX_DATAERR
  else
    if [[ "$1" =~ [[:alpha:]] ]] 
    then
        return 1
    else
	return 0
    fi
  fi
}
# print the decimal value ascii code of a printable character 
chartoasciid(){
   ARG=1
   if [ "$#" != "$ARG" ]
   then
    echo "usage: ${FUNCNAME[0]} <char>"
     return $E_BADARGS
   else
     #debug "executing a=\$(echo -n \"$1\" | hexdump -e '1/1 \"%02X\n\"'); hextodec $a"
     a=$(echo -n "$1" | hexdump -e '1/1 "%02X\n"'); hextodec $a
   fi
}

dectobin(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: dectobin <decval>"
    return $E_ERR_ARG
  else
    $BCCMD <<<"obase=2;ibase=10; $1"
    return 0
  fi
}

bintodec(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: bintodec <binval>"
  else
    $BCCMD <<<"obase=10;ibase=2; $1"
  fi
}

bintooct(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <binval>"
  else
    $BCCMD <<<"obase=8;ibase=2; $1"
  fi
}


bintohex(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: bintohex <binval>"
  else
    $BCCMD <<<"obase=16;ibase=2; $1"
  fi
}

hextobin(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <hexval>"
  else
    $BCCMD <<<"obase=2;ibase=16; $1"
  fi
}

octobin(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <octval>"
  elif [[ ! "$1" =~ ^[0-7][0-7]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an oct number [0-7]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=2;ibase=8; $1"
  fi
}

hextodec(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: hextodec <hexval>"
  elif [[ ! "$1" =~ ^[0-9A-F][0-9A-F]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an hex number [0-9A-F]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=10;ibase=16; $1"
  fi
}

octodec(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <octval>"
  elif [[ ! "$1" =~ ^[0-7][0-7]*$ ]]
  then
    setdebuglevel "ERR"
    debug "you must input an oct number [0-7]*"
    return $EX_DATAERR
  else
    $BCCMD <<<"obase=10;ibase=8; $1"
  fi
}


dectohex(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: dectohex <decval>"
  else
    $BCCMD <<<"obase=16;ibase=10; $1"
  fi
}

dectooct(){
  ARG=1
  E_ERR_ARG=65
  if [ $# -ne "$ARG" ] # check on the number of parameters passed to the function
  then
    echo "usage: ${FUNCNAME[0]} <decval>"
  else
    $BCCMD <<<"obase=8;ibase=10; $1"
  fi
}
#create a binary file full of random data with size 1024 bytes
#for ((k=0; k<1024; k++)); do bytetobin $(getRandom 255) >> randombytes; done;
