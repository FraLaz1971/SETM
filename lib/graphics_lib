# include serena telemetry library
SRNTM_HOME=~/projects/SRNTM
. $SRNTM_HOME/srn_tm_lib
# default values
DEBUGLEV="INFO"
ds="|" # debug separator char
prog="fe library"
hn=$(hostname)
# global variables
declare -i nrows=$1  ncols=$2
DEBUG=1

testfun(){
  caller
  caller 0
}

fgnuplot(){
  GNPCMD="gnuplot --persist"
  debug "executing $GNPCMD $1"
  $GNPCMD "$1"
}


genehist(){
  debug "n. of pars = $#"  
  if [[ "$#" -ne "1" ]] 
  then
    debug "usage: genehist <n.histos>"
    exit $E_BADARGS
  else 
    if [[ ! "$1" =~ ^[0-9][0-9]*$ ]]
    then
      debug "$1 is NOT an int. number"    
      debug "usage: genehist <n.histos>"
      exit 1
    fi
   debug "genehist: creating $1 histograms file(s)"
   echo "#generating elena histogram"
   for ((e=0; e<$1; e++))
   do
    fillrandom
    for((a=0; a<31; a++)); do printf "%d " ${hv[$a]}; done; printf "%d" ${hv[$a]};printf "\n"
   done
  fi
}

create_gp_ts(){
  if [[ "$#" != "2" ]]
  then
    debug "usage: create_gp_ts <output filename> <input histogram file>"
    exit $E_BADARGS;
  else
    debug "$0: creating temp gnuplot script on file $1"
    # finding contained number of histos
    mnh=$(awk '
	BEGIN {nh = 0}
	!/#/ {if (nh < NF) nh = NF}
	END {print "found " nh " histos" > "/dev/stderr"; printf("%d", nh)}
	' $2)
    ci=1
    debug "awk output is $mnh"
    echo "set style fill solid" >> $1
    while [[ "$ci" -le "$mnh" ]] 
    do
      echo "plot [1:32] '$2' using $ci with histogram " >> $1
      echo "pause 1" >> $1
      ci=$(($ci + 1))
    done
    debug "gnuplot script generated"
  fi
}

remove_tempfile(){
  echo "remove file $1 ? (y/n) [enter]"
  read av
  case "$av" in
  "y" )
    if test -f $1; then rm $1; fi
    return "$?"
  ;;
  "n" )
    debug "$1 has NOT been removed"
    return "$?"
  ;;
  * )
    echo "please type y or n"
    remove_tempfile $1
  esac
}

getRandom(){
  if [[ $# != 1 ]]
  then
    debug "getRandom: gives a random number in the field [0-max)"
    debug "usage: getRandom <max value>"
    exit $E_BADARGS;
  else
    is_int $1 || { setdebuglevel "ERR"; debug "input args $1 MUST be integer value"; }
    echo $(($RANDOM*$1/32767))
  fi
}

printMatrix(){
  declare -i i; declare -i j # array indexes
  for ((i=0; i < $nrows; i++)) # loop on rows
  do
     for ((j=0; j<$ncols; j++)) # loop on columns
     do
       printf "%d\t" $(getRandom 100)
      #       printf "%d\t" $(( $i*$ncols + $j ))
     done
     echo
  done
  return 0
}

printGPImage(){ # prints the matrix as an image for gnuplot input
  declare -i i=0; declare -i j=0 # array indexes
  for ((i=0; i < $nrows; i++)) # loop on rows
  do
     #echo "#row $(( $i + 1))"
     for ((j=0; j<$ncols; j++)) # loop on columns
     do
       printf "%d\t%d\t%d\n" $(($i+1)) $j $(( $(getRandom 100)*(i*j+1) ))
     done
     if [[ $i -ne $(( $nrows - 1)) ]]; then echo; fi
  done
  return 0
}

createImage(){
if [ "$#" != "3" ]
then 
	echo "usage: $0 <n.rows> <n.cols> (in decimal) <matrix type> [normal|gnuplot]"
	exit $E_DATAERR
else
  declare -r DEBUG=true
  DEBUGLEV="INFO"
  ds="|" # debug separator char
  is_int $1 && is_int $2 || { debug "input args $1 and $2 MUST be legal decimal integers!"; exit $EX_DATAERR; }
  (( $1 > 0)) && (($2 > 0)) || { debug "input args $1 and $2 MUST be > 0 integers values !"; exit $E_ARGSLIMITS; }
  case "$3" in
  "normal")
    debug "creating matrix in normal mode"
    debug "e00 e01    ...       e0(n-1)"
    debug "..."
    debug "e(m-1)0 e(m-1)1 ...  e(m-1)0"
    printMatrix
  ;;
  "gnuplot")
    debug "creating 2D image i j val(i,j)"
    printGPImage
  ;;
  *)
    debug "sorry, you have to select matrix mode [normal|gnuplot]"
    exit $E_ARGSLIMITS
  ;;
  esac
  debug  "printing on stdout random values in [0-100) matrix with $1 rows and $2 columns"
fi
return 0
}

createGPimgScript(){ # create a gnuplot script to print a given NxM image file
  if [[ "$#" -ne 4 ]]
  then
    setdebuglevel "WARN"
    debug "usage: createGPimgScript <infile> <outfile> <nrows> <ncols>"
    exit $E_BADARGS
  else
    debug "creating gnuplot script reading image from file $1"
  infile=$1
#  pixelsize=15
#  debug "infile = $infile"
#  debug "before params are $*" 
  shift #now outfile is $1
  debug "now params are $*" 
  is_int $2 && is_int $3 || { debug "input args $2 and $3 MUST be legal decimal integers!"; exit $EX_DATAERR; }
  (( $2 > 1)) && (($3 > 1)) || { debug "input args $2 and $3 MUST be integers values > 1 !"; exit $E_ARGSLIMITS; }
#  (( ))
    debug "creating gnuplot script on file $1"
    { 
      echo "unset key"
#      echo "set terminal qt size $2*$pixelsize,$3*$pixelsize"
      echo "set terminal qt"
      myinfile=${infile//_/\\_}
      echo "set title 'plots matrix $2X$3 $myinfile'"
      echo "set xrange [0:$(($3 - 1))]"
#      echo "set yrange [0:$(($2 - 1))]"
      echo "set yrange [1:$2]"
#      echo "set ytics 0,4,$(($2 - 1))"
      echo "set ytics 1,1,$2"
#      echo "set ytics 1,5,$2"
      #echo "set tic scale 0"
      #echo "set label '$infile'"
      echo "plot '$infile' using 2:1:3 with image"
#      echo "plot '$infile' using 1:2:3 with image"
    } >> "$1"
  fi
  return 0
}

plotImage(){
  if [[ "$#" -ne 3 ]]
  then
    debug "usage: plotImage <imagefile> <nrows> <ncols>"
    exit $E_BADARGS
  else
    infile=$1
    is_int $2 && is_int $3 || { debug "input args $2 and $3 MUST be legal decimal integers!"; exit $EX_DATAERR; }
    (( $2 > 0)) && (($3 > 0)) || { debug "input args $2 and $3 MUST be > 0 integers values !"; exit $E_ARGSLIMITS; }  
    debug "creating gnuplot script"
    gnuplot_script=$(mktemp --suffix=_"$2"X"$3"_image.gp)
    createGPimgScript "$infile" "$gnuplot_script" $2 $3
    debug "plotting the image ..."
    fgnuplot "$gnuplot_script"
  fi
  debug "plotted using $gnuplot_script gnuplot script file"
  return 0  
}





